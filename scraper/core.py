"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['HTTP_URL_PATTERN', 'valid_href', 'hydrate_links']

# %% ../nbs/00_core.ipynb 3
from urllib.parse import urlparse
import re

# %% ../nbs/00_core.ipynb 4
def valid_href(href):
    """
    Checks if the provided `href` should be ignored based on a set of conditions.
    Returns True if the href matches any ignore condition, otherwise False.
    """
    ignore_conditions = [
        lambda x: x == "" or x == "#",
        lambda x: x.startswith(("ftp:", "irc:", "mailto:", "tel:", "javascript:", "app://")),
        lambda x: any(i in x for i in ["private","subscribe","paywall","login"]),
        lambda x: any(x.endswith(i) for i in [".mp4", ".jpg", ".png", ".gif", ".jpeg", ".json", ".xml", ".api"])
        ]
    
    href = href.lower()
    for fn in ignore_conditions:
        if fn(href):
            return False

    return True

# %% ../nbs/00_core.ipynb 6
HTTP_URL_PATTERN = r'^http[s]*://.+'
def hydrate_links(local_domain, url):
    """Converts relative URLs to absolute; returns None for external links."""
    clean_link = None
    
    if re.search(HTTP_URL_PATTERN, url):
        url_obj = urlparse(url)
        if url_obj.netloc == local_domain:
                clean_link = url

    else:
        if url.startswith("/"):
            url = url[1:]
        clean_link = "https://" + local_domain + "/" + url

    if clean_link is not None:
        if clean_link.endswith("/#"):
            clean_link = clean_link[:-2] 
        if clean_link.endswith("/") or  clean_link.endswith("#"):
            clean_link = clean_link[:-1]

    return clean_link
